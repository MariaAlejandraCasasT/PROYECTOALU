// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/21/2022 16:03:15"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ALUFull_P
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALUFull_P_vlg_sample_tst(
	A,
	Alu_Sel,
	B,
	sampler_tx
);
input [7:0] A;
input [3:0] Alu_Sel;
input [7:0] B;
output sampler_tx;

reg sample;
time current_time;
always @(A or Alu_Sel or B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ALUFull_P_vlg_check_tst (
	Dis1,
	Dis2,
	Dis3,
	Dis4,
	NZVC,
	Sal,
	sampler_rx
);
input [6:0] Dis1;
input [6:0] Dis2;
input [6:0] Dis3;
input [6:0] Dis4;
input [3:0] NZVC;
input [3:0] Sal;
input sampler_rx;

reg [6:0] Dis1_expected;
reg [6:0] Dis2_expected;
reg [6:0] Dis3_expected;
reg [6:0] Dis4_expected;
reg [3:0] NZVC_expected;
reg [3:0] Sal_expected;

reg [6:0] Dis1_prev;
reg [6:0] Dis2_prev;
reg [6:0] Dis3_prev;
reg [6:0] Dis4_prev;
reg [3:0] NZVC_prev;
reg [3:0] Sal_prev;

reg [6:0] Dis1_expected_prev;
reg [6:0] Dis2_expected_prev;
reg [6:0] Dis3_expected_prev;
reg [6:0] Dis4_expected_prev;
reg [3:0] NZVC_expected_prev;
reg [3:0] Sal_expected_prev;

reg [6:0] last_Dis1_exp;
reg [6:0] last_Dis2_exp;
reg [6:0] last_Dis3_exp;
reg [6:0] last_Dis4_exp;
reg [3:0] last_NZVC_exp;
reg [3:0] last_Sal_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	Dis1_prev = Dis1;
	Dis2_prev = Dis2;
	Dis3_prev = Dis3;
	Dis4_prev = Dis4;
	NZVC_prev = NZVC;
	Sal_prev = Sal;
end

// update expected /o prevs

always @(trigger)
begin
	Dis1_expected_prev = Dis1_expected;
	Dis2_expected_prev = Dis2_expected;
	Dis3_expected_prev = Dis3_expected;
	Dis4_expected_prev = Dis4_expected;
	NZVC_expected_prev = NZVC_expected;
	Sal_expected_prev = Sal_expected;
end


// expected Dis1[ 6 ]
initial
begin
	Dis1_expected[6] = 1'bX;
end 
// expected Dis1[ 5 ]
initial
begin
	Dis1_expected[5] = 1'bX;
end 
// expected Dis1[ 4 ]
initial
begin
	Dis1_expected[4] = 1'bX;
end 
// expected Dis1[ 3 ]
initial
begin
	Dis1_expected[3] = 1'bX;
end 
// expected Dis1[ 2 ]
initial
begin
	Dis1_expected[2] = 1'bX;
end 
// expected Dis1[ 1 ]
initial
begin
	Dis1_expected[1] = 1'bX;
end 
// expected Dis1[ 0 ]
initial
begin
	Dis1_expected[0] = 1'bX;
end 
// expected Dis2[ 6 ]
initial
begin
	Dis2_expected[6] = 1'bX;
end 
// expected Dis2[ 5 ]
initial
begin
	Dis2_expected[5] = 1'bX;
end 
// expected Dis2[ 4 ]
initial
begin
	Dis2_expected[4] = 1'bX;
end 
// expected Dis2[ 3 ]
initial
begin
	Dis2_expected[3] = 1'bX;
end 
// expected Dis2[ 2 ]
initial
begin
	Dis2_expected[2] = 1'bX;
end 
// expected Dis2[ 1 ]
initial
begin
	Dis2_expected[1] = 1'bX;
end 
// expected Dis2[ 0 ]
initial
begin
	Dis2_expected[0] = 1'bX;
end 
// expected Dis3[ 6 ]
initial
begin
	Dis3_expected[6] = 1'bX;
end 
// expected Dis3[ 5 ]
initial
begin
	Dis3_expected[5] = 1'bX;
end 
// expected Dis3[ 4 ]
initial
begin
	Dis3_expected[4] = 1'bX;
end 
// expected Dis3[ 3 ]
initial
begin
	Dis3_expected[3] = 1'bX;
end 
// expected Dis3[ 2 ]
initial
begin
	Dis3_expected[2] = 1'bX;
end 
// expected Dis3[ 1 ]
initial
begin
	Dis3_expected[1] = 1'bX;
end 
// expected Dis3[ 0 ]
initial
begin
	Dis3_expected[0] = 1'bX;
end 
// expected Dis4[ 6 ]
initial
begin
	Dis4_expected[6] = 1'bX;
end 
// expected Dis4[ 5 ]
initial
begin
	Dis4_expected[5] = 1'bX;
end 
// expected Dis4[ 4 ]
initial
begin
	Dis4_expected[4] = 1'bX;
end 
// expected Dis4[ 3 ]
initial
begin
	Dis4_expected[3] = 1'bX;
end 
// expected Dis4[ 2 ]
initial
begin
	Dis4_expected[2] = 1'bX;
end 
// expected Dis4[ 1 ]
initial
begin
	Dis4_expected[1] = 1'bX;
end 
// expected Dis4[ 0 ]
initial
begin
	Dis4_expected[0] = 1'bX;
end 
// expected NZVC[ 3 ]
initial
begin
	NZVC_expected[3] = 1'bX;
end 
// expected NZVC[ 2 ]
initial
begin
	NZVC_expected[2] = 1'bX;
end 
// expected NZVC[ 1 ]
initial
begin
	NZVC_expected[1] = 1'bX;
end 
// expected NZVC[ 0 ]
initial
begin
	NZVC_expected[0] = 1'bX;
end 
// expected Sal[ 3 ]
initial
begin
	Sal_expected[3] = 1'bX;
end 
// expected Sal[ 2 ]
initial
begin
	Sal_expected[2] = 1'bX;
end 
// expected Sal[ 1 ]
initial
begin
	Sal_expected[1] = 1'bX;
end 
// expected Sal[ 0 ]
initial
begin
	Sal_expected[0] = 1'bX;
end 
// generate trigger
always @(Dis1_expected or Dis1 or Dis2_expected or Dis2 or Dis3_expected or Dis3 or Dis4_expected or Dis4 or NZVC_expected or NZVC or Sal_expected or Sal)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Dis1 = %b | expected Dis2 = %b | expected Dis3 = %b | expected Dis4 = %b | expected NZVC = %b | expected Sal = %b | ",Dis1_expected_prev,Dis2_expected_prev,Dis3_expected_prev,Dis4_expected_prev,NZVC_expected_prev,Sal_expected_prev);
	$display("| real Dis1 = %b | real Dis2 = %b | real Dis3 = %b | real Dis4 = %b | real NZVC = %b | real Sal = %b | ",Dis1_prev,Dis2_prev,Dis3_prev,Dis4_prev,NZVC_prev,Sal_prev);
`endif
	if (
		( Dis1_expected_prev[0] !== 1'bx ) && ( Dis1_prev[0] !== Dis1_expected_prev[0] )
		&& ((Dis1_expected_prev[0] !== last_Dis1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis1_expected_prev);
		$display ("     Real value = %b", Dis1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dis1_exp[0] = Dis1_expected_prev[0];
	end
	if (
		( Dis1_expected_prev[1] !== 1'bx ) && ( Dis1_prev[1] !== Dis1_expected_prev[1] )
		&& ((Dis1_expected_prev[1] !== last_Dis1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis1_expected_prev);
		$display ("     Real value = %b", Dis1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dis1_exp[1] = Dis1_expected_prev[1];
	end
	if (
		( Dis1_expected_prev[2] !== 1'bx ) && ( Dis1_prev[2] !== Dis1_expected_prev[2] )
		&& ((Dis1_expected_prev[2] !== last_Dis1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis1_expected_prev);
		$display ("     Real value = %b", Dis1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dis1_exp[2] = Dis1_expected_prev[2];
	end
	if (
		( Dis1_expected_prev[3] !== 1'bx ) && ( Dis1_prev[3] !== Dis1_expected_prev[3] )
		&& ((Dis1_expected_prev[3] !== last_Dis1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis1_expected_prev);
		$display ("     Real value = %b", Dis1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dis1_exp[3] = Dis1_expected_prev[3];
	end
	if (
		( Dis1_expected_prev[4] !== 1'bx ) && ( Dis1_prev[4] !== Dis1_expected_prev[4] )
		&& ((Dis1_expected_prev[4] !== last_Dis1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis1_expected_prev);
		$display ("     Real value = %b", Dis1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dis1_exp[4] = Dis1_expected_prev[4];
	end
	if (
		( Dis1_expected_prev[5] !== 1'bx ) && ( Dis1_prev[5] !== Dis1_expected_prev[5] )
		&& ((Dis1_expected_prev[5] !== last_Dis1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis1_expected_prev);
		$display ("     Real value = %b", Dis1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dis1_exp[5] = Dis1_expected_prev[5];
	end
	if (
		( Dis1_expected_prev[6] !== 1'bx ) && ( Dis1_prev[6] !== Dis1_expected_prev[6] )
		&& ((Dis1_expected_prev[6] !== last_Dis1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis1_expected_prev);
		$display ("     Real value = %b", Dis1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dis1_exp[6] = Dis1_expected_prev[6];
	end
	if (
		( Dis2_expected_prev[0] !== 1'bx ) && ( Dis2_prev[0] !== Dis2_expected_prev[0] )
		&& ((Dis2_expected_prev[0] !== last_Dis2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis2_expected_prev);
		$display ("     Real value = %b", Dis2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dis2_exp[0] = Dis2_expected_prev[0];
	end
	if (
		( Dis2_expected_prev[1] !== 1'bx ) && ( Dis2_prev[1] !== Dis2_expected_prev[1] )
		&& ((Dis2_expected_prev[1] !== last_Dis2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis2_expected_prev);
		$display ("     Real value = %b", Dis2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dis2_exp[1] = Dis2_expected_prev[1];
	end
	if (
		( Dis2_expected_prev[2] !== 1'bx ) && ( Dis2_prev[2] !== Dis2_expected_prev[2] )
		&& ((Dis2_expected_prev[2] !== last_Dis2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis2_expected_prev);
		$display ("     Real value = %b", Dis2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dis2_exp[2] = Dis2_expected_prev[2];
	end
	if (
		( Dis2_expected_prev[3] !== 1'bx ) && ( Dis2_prev[3] !== Dis2_expected_prev[3] )
		&& ((Dis2_expected_prev[3] !== last_Dis2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis2_expected_prev);
		$display ("     Real value = %b", Dis2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dis2_exp[3] = Dis2_expected_prev[3];
	end
	if (
		( Dis2_expected_prev[4] !== 1'bx ) && ( Dis2_prev[4] !== Dis2_expected_prev[4] )
		&& ((Dis2_expected_prev[4] !== last_Dis2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis2_expected_prev);
		$display ("     Real value = %b", Dis2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dis2_exp[4] = Dis2_expected_prev[4];
	end
	if (
		( Dis2_expected_prev[5] !== 1'bx ) && ( Dis2_prev[5] !== Dis2_expected_prev[5] )
		&& ((Dis2_expected_prev[5] !== last_Dis2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis2_expected_prev);
		$display ("     Real value = %b", Dis2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dis2_exp[5] = Dis2_expected_prev[5];
	end
	if (
		( Dis2_expected_prev[6] !== 1'bx ) && ( Dis2_prev[6] !== Dis2_expected_prev[6] )
		&& ((Dis2_expected_prev[6] !== last_Dis2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis2_expected_prev);
		$display ("     Real value = %b", Dis2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dis2_exp[6] = Dis2_expected_prev[6];
	end
	if (
		( Dis3_expected_prev[0] !== 1'bx ) && ( Dis3_prev[0] !== Dis3_expected_prev[0] )
		&& ((Dis3_expected_prev[0] !== last_Dis3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis3_expected_prev);
		$display ("     Real value = %b", Dis3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dis3_exp[0] = Dis3_expected_prev[0];
	end
	if (
		( Dis3_expected_prev[1] !== 1'bx ) && ( Dis3_prev[1] !== Dis3_expected_prev[1] )
		&& ((Dis3_expected_prev[1] !== last_Dis3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis3_expected_prev);
		$display ("     Real value = %b", Dis3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dis3_exp[1] = Dis3_expected_prev[1];
	end
	if (
		( Dis3_expected_prev[2] !== 1'bx ) && ( Dis3_prev[2] !== Dis3_expected_prev[2] )
		&& ((Dis3_expected_prev[2] !== last_Dis3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis3_expected_prev);
		$display ("     Real value = %b", Dis3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dis3_exp[2] = Dis3_expected_prev[2];
	end
	if (
		( Dis3_expected_prev[3] !== 1'bx ) && ( Dis3_prev[3] !== Dis3_expected_prev[3] )
		&& ((Dis3_expected_prev[3] !== last_Dis3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis3_expected_prev);
		$display ("     Real value = %b", Dis3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dis3_exp[3] = Dis3_expected_prev[3];
	end
	if (
		( Dis3_expected_prev[4] !== 1'bx ) && ( Dis3_prev[4] !== Dis3_expected_prev[4] )
		&& ((Dis3_expected_prev[4] !== last_Dis3_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis3_expected_prev);
		$display ("     Real value = %b", Dis3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dis3_exp[4] = Dis3_expected_prev[4];
	end
	if (
		( Dis3_expected_prev[5] !== 1'bx ) && ( Dis3_prev[5] !== Dis3_expected_prev[5] )
		&& ((Dis3_expected_prev[5] !== last_Dis3_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis3_expected_prev);
		$display ("     Real value = %b", Dis3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dis3_exp[5] = Dis3_expected_prev[5];
	end
	if (
		( Dis3_expected_prev[6] !== 1'bx ) && ( Dis3_prev[6] !== Dis3_expected_prev[6] )
		&& ((Dis3_expected_prev[6] !== last_Dis3_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis3_expected_prev);
		$display ("     Real value = %b", Dis3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dis3_exp[6] = Dis3_expected_prev[6];
	end
	if (
		( Dis4_expected_prev[0] !== 1'bx ) && ( Dis4_prev[0] !== Dis4_expected_prev[0] )
		&& ((Dis4_expected_prev[0] !== last_Dis4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis4_expected_prev);
		$display ("     Real value = %b", Dis4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Dis4_exp[0] = Dis4_expected_prev[0];
	end
	if (
		( Dis4_expected_prev[1] !== 1'bx ) && ( Dis4_prev[1] !== Dis4_expected_prev[1] )
		&& ((Dis4_expected_prev[1] !== last_Dis4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis4_expected_prev);
		$display ("     Real value = %b", Dis4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Dis4_exp[1] = Dis4_expected_prev[1];
	end
	if (
		( Dis4_expected_prev[2] !== 1'bx ) && ( Dis4_prev[2] !== Dis4_expected_prev[2] )
		&& ((Dis4_expected_prev[2] !== last_Dis4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis4_expected_prev);
		$display ("     Real value = %b", Dis4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Dis4_exp[2] = Dis4_expected_prev[2];
	end
	if (
		( Dis4_expected_prev[3] !== 1'bx ) && ( Dis4_prev[3] !== Dis4_expected_prev[3] )
		&& ((Dis4_expected_prev[3] !== last_Dis4_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis4_expected_prev);
		$display ("     Real value = %b", Dis4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Dis4_exp[3] = Dis4_expected_prev[3];
	end
	if (
		( Dis4_expected_prev[4] !== 1'bx ) && ( Dis4_prev[4] !== Dis4_expected_prev[4] )
		&& ((Dis4_expected_prev[4] !== last_Dis4_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis4_expected_prev);
		$display ("     Real value = %b", Dis4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Dis4_exp[4] = Dis4_expected_prev[4];
	end
	if (
		( Dis4_expected_prev[5] !== 1'bx ) && ( Dis4_prev[5] !== Dis4_expected_prev[5] )
		&& ((Dis4_expected_prev[5] !== last_Dis4_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis4_expected_prev);
		$display ("     Real value = %b", Dis4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Dis4_exp[5] = Dis4_expected_prev[5];
	end
	if (
		( Dis4_expected_prev[6] !== 1'bx ) && ( Dis4_prev[6] !== Dis4_expected_prev[6] )
		&& ((Dis4_expected_prev[6] !== last_Dis4_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dis4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dis4_expected_prev);
		$display ("     Real value = %b", Dis4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Dis4_exp[6] = Dis4_expected_prev[6];
	end
	if (
		( NZVC_expected_prev[0] !== 1'bx ) && ( NZVC_prev[0] !== NZVC_expected_prev[0] )
		&& ((NZVC_expected_prev[0] !== last_NZVC_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NZVC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NZVC_expected_prev);
		$display ("     Real value = %b", NZVC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_NZVC_exp[0] = NZVC_expected_prev[0];
	end
	if (
		( NZVC_expected_prev[1] !== 1'bx ) && ( NZVC_prev[1] !== NZVC_expected_prev[1] )
		&& ((NZVC_expected_prev[1] !== last_NZVC_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NZVC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NZVC_expected_prev);
		$display ("     Real value = %b", NZVC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_NZVC_exp[1] = NZVC_expected_prev[1];
	end
	if (
		( NZVC_expected_prev[2] !== 1'bx ) && ( NZVC_prev[2] !== NZVC_expected_prev[2] )
		&& ((NZVC_expected_prev[2] !== last_NZVC_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NZVC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NZVC_expected_prev);
		$display ("     Real value = %b", NZVC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_NZVC_exp[2] = NZVC_expected_prev[2];
	end
	if (
		( NZVC_expected_prev[3] !== 1'bx ) && ( NZVC_prev[3] !== NZVC_expected_prev[3] )
		&& ((NZVC_expected_prev[3] !== last_NZVC_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NZVC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NZVC_expected_prev);
		$display ("     Real value = %b", NZVC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_NZVC_exp[3] = NZVC_expected_prev[3];
	end
	if (
		( Sal_expected_prev[0] !== 1'bx ) && ( Sal_prev[0] !== Sal_expected_prev[0] )
		&& ((Sal_expected_prev[0] !== last_Sal_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sal[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sal_expected_prev);
		$display ("     Real value = %b", Sal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Sal_exp[0] = Sal_expected_prev[0];
	end
	if (
		( Sal_expected_prev[1] !== 1'bx ) && ( Sal_prev[1] !== Sal_expected_prev[1] )
		&& ((Sal_expected_prev[1] !== last_Sal_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sal[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sal_expected_prev);
		$display ("     Real value = %b", Sal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Sal_exp[1] = Sal_expected_prev[1];
	end
	if (
		( Sal_expected_prev[2] !== 1'bx ) && ( Sal_prev[2] !== Sal_expected_prev[2] )
		&& ((Sal_expected_prev[2] !== last_Sal_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sal[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sal_expected_prev);
		$display ("     Real value = %b", Sal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Sal_exp[2] = Sal_expected_prev[2];
	end
	if (
		( Sal_expected_prev[3] !== 1'bx ) && ( Sal_prev[3] !== Sal_expected_prev[3] )
		&& ((Sal_expected_prev[3] !== last_Sal_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sal[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sal_expected_prev);
		$display ("     Real value = %b", Sal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Sal_exp[3] = Sal_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ALUFull_P_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [3:0] Alu_Sel;
reg [7:0] B;
// wires                                               
wire [6:0] Dis1;
wire [6:0] Dis2;
wire [6:0] Dis3;
wire [6:0] Dis4;
wire [3:0] NZVC;
wire [3:0] Sal;

wire sampler;                             

// assign statements (if any)                          
ALUFull_P i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.Alu_Sel(Alu_Sel),
	.B(B),
	.Dis1(Dis1),
	.Dis2(Dis2),
	.Dis3(Dis3),
	.Dis4(Dis4),
	.NZVC(NZVC),
	.Sal(Sal)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// Alu_Sel[ 3 ]
initial
begin
	Alu_Sel[3] = 1'b0;
end 
// Alu_Sel[ 2 ]
initial
begin
	Alu_Sel[2] = 1'b0;
end 
// Alu_Sel[ 1 ]
initial
begin
	Alu_Sel[1] = 1'b0;
end 
// Alu_Sel[ 0 ]
initial
begin
	Alu_Sel[0] = 1'b1;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b1;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b1;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b1;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 

ALUFull_P_vlg_sample_tst tb_sample (
	.A(A),
	.Alu_Sel(Alu_Sel),
	.B(B),
	.sampler_tx(sampler)
);

ALUFull_P_vlg_check_tst tb_out(
	.Dis1(Dis1),
	.Dis2(Dis2),
	.Dis3(Dis3),
	.Dis4(Dis4),
	.NZVC(NZVC),
	.Sal(Sal),
	.sampler_rx(sampler)
);
endmodule

